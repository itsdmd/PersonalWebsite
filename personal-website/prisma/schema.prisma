// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Relationships description:
// There are multiple posts in the database
// Each post have its own metadata and content
// Post's metadata can have multiple topics and categories
// Each topic can have multiple super topics and sub topics

model Post {
    id           String        @id // This will be the ID of the Joplin note
    PostMetadata PostMetadata?
    PostContent  PostContent?
}

model PostMetadata {
    id         String          @id @default(uuid())
    createdAt  DateTime        @default(now())
    updatedAt  DateTime        @updatedAt
    references PostReference[]
    topics     PostTopic[]
    categories PostCategory[]
    post       Post            @relation(fields: [postId], references: [id])
    postId     String          @unique
}

model PostContent {
    id       String @id @default(uuid())
    title    String @unique
    subtitle String
    content  String
    tldr     String
    post     Post   @relation(fields: [postId], references: [id])
    postId   String @unique
}

model PostReference {
    id             String        @id @default(uuid())
    name           String
    url            String
    description    String?
    postMetadata   PostMetadata? @relation(fields: [postMetadataId], references: [id])
    postMetadataId String?
}

// e.g database, cloud, etc
model PostTopic {
    id             String        @id @default(uuid())
    name           String
    code           String        @unique
    description    String?
    postMetadata   PostMetadata? @relation(fields: [postMetadataId], references: [id])
    postMetadataId String?
}

// e.g. documentation, journal, etc
model PostCategory {
    id             String        @id @default(uuid())
    name           String
    code           String        @unique
    description    String?
    postMetadata   PostMetadata? @relation(fields: [postMetadataId], references: [id])
    postMetadataId String?
}
